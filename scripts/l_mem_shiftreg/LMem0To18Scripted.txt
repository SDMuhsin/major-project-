module DMem8Scripted(
		 muxOut,
		 dMemIn,
		 reaccessAddress,
		 ly,
		 clk,rst 
 );
parameter r = 4;
parameter c = 18;
parameter w = 6;
parameter reaccessAddressWidth = 2;
input [reaccessAddressWidth-1:0]reaccessAddress;
input ly;
input clk,rst;
input [r*w-1:0]dMemIn;
wire [w-1:0]dMemInDummy[r-1:0];
output wire [r*w -1 : 0]muxOut;// r numbers of w bits
reg [w-1:0]muxOutWire[r-1:0];
reg [w-1:0] fifoOut[r-1:0][c-1:0]; // FIFO Outputs
genvar k;
generate
    for (k=0;k<r;k=k+1)begin:assign_output
        assign muxOut[ (k+1)*w-1:k*w] = muxOutWire[k];
        assign dMemInDummy[k] = dMemIn[ (k+1)*w-1:k*w];
    end
endgenerate
integer i;
integer j;
always @(posedge clk) begin
    if (rst) begin
         for(i=0;i<r;i=i+1)begin
           for(j=0;j<c;j=j+1)begin
                fifoOut[i][j] = 0;
           end
        end
    end
    else begin
    if(ly==1'b0)begin
        // Set (i,j)th value = (i,j-1)th value
        for(i = r-1; i > -1; i=i-1) begin
            for(j= c-1; j > 0; j=j-1)begin
                fifoOut[i][j] =  fifoOut[i][j-1];
            end
        end
        // Load Inputs
        for(i = r-1; i > -1; i=i-1) begin
            fifoOut[i][0] =  dMemInDummy[i]; 
        end
    else begin 
        // Set (i,j)th value = (i,j)th value
        for(i = r-1; i > -1; i=i-1) begin
            for(j= c-1; j > 0; j=j-1)begin
                fifoOut[i][j] =  fifoOut[i][j-1];
            end
        end
    end
    end
end
always@(*)begin
case(ly)
    1'b0: begin 
       for(i=0;i<r;i=i+1)begin 
         muxOutWire[i] = 0; 
       end 
    end
    1'b1:begin 
     case(reaccessAddress)


	 0 : begin 
			 muxOutWire[ 0 ] = fifoOut[ 29 ][ 0 ]; 
			 muxOutWire[ 1 ] = fifoOut[ 30 ][ 0 ]; 
			 muxOutWire[ 2 ] = fifoOut[ 31 ][ 0 ]; 
			 muxOutWire[ 3 ] = fifoOut[ 32 ][ 0 ]; 
			 muxOutWire[ 4 ] = fifoOut[ 33 ][ 0 ]; 
			 muxOutWire[ 5 ] = fifoOut[ 26 ][ 0 ]; 
			 muxOutWire[ 6 ] = fifoOut[ 27 ][ 0 ]; 
			 muxOutWire[ 7 ] = fifoOut[ 28 ][ 0 ]; 
			 muxOutWire[ 8 ] = fifoOut[ 51 ][ 0 ]; 
			 muxOutWire[ 9 ] = fifoOut[ 51 ][ 0 ]; 
			 muxOutWire[ 10 ] = fifoOut[ 51 ][ 0 ]; 
			 muxOutWire[ 11 ] = fifoOut[ 51 ][ 0 ]; 
			 muxOutWire[ 12 ] = fifoOut[ 51 ][ 0 ]; 
			 muxOutWire[ 13 ] = fifoOut[ 51 ][ 0 ]; 
			 muxOutWire[ 14 ] = fifoOut[ 51 ][ 0 ]; 
			 muxOutWire[ 15 ] = fifoOut[ 51 ][ 0 ]; 
			 muxOutWire[ 16 ] = fifoOut[ 51 ][ 0 ]; 
			 muxOutWire[ 17 ] = fifoOut[ 51 ][ 0 ]; 
			 muxOutWire[ 18 ] = fifoOut[ 51 ][ 0 ]; 
			 muxOutWire[ 19 ] = fifoOut[ 51 ][ 0 ]; 
			 muxOutWire[ 20 ] = fifoOut[ 51 ][ 0 ]; 
			 muxOutWire[ 21 ] = fifoOut[ 51 ][ 0 ]; 
			 muxOutWire[ 22 ] = fifoOut[ 51 ][ 0 ]; 
			 muxOutWire[ 23 ] = fifoOut[ 51 ][ 0 ]; 
			 muxOutWire[ 24 ] = fifoOut[ 51 ][ 0 ]; 
			 muxOutWire[ 25 ] = fifoOut[ 51 ][ 0 ]; 
			 muxOutWire[ 26 ] = fifoOut[ 33 ][ 0 ]; 
			 muxOutWire[ 27 ] = fifoOut[ 26 ][ 0 ]; 
			 muxOutWire[ 28 ] = fifoOut[ 27 ][ 0 ]; 
			 muxOutWire[ 29 ] = fifoOut[ 28 ][ 0 ]; 
			 muxOutWire[ 30 ] = fifoOut[ 29 ][ 0 ]; 
			 muxOutWire[ 31 ] = fifoOut[ 30 ][ 0 ]; 
			 muxOutWire[ 32 ] = fifoOut[ 31 ][ 0 ]; 
			 muxOutWire[ 33 ] = fifoOut[ 32 ][ 0 ]; 
			 muxOutWire[ 34 ] = fifoOut[ 51 ][ 0 ]; 
			 muxOutWire[ 35 ] = fifoOut[ 51 ][ 0 ]; 
			 muxOutWire[ 36 ] = fifoOut[ 51 ][ 0 ]; 
			 muxOutWire[ 37 ] = fifoOut[ 51 ][ 0 ]; 
			 muxOutWire[ 38 ] = fifoOut[ 51 ][ 0 ]; 
			 muxOutWire[ 39 ] = fifoOut[ 51 ][ 0 ]; 
			 muxOutWire[ 40 ] = fifoOut[ 51 ][ 0 ]; 
			 muxOutWire[ 41 ] = fifoOut[ 51 ][ 0 ]; 
			 muxOutWire[ 42 ] = fifoOut[ 51 ][ 0 ]; 
			 muxOutWire[ 43 ] = fifoOut[ 51 ][ 0 ]; 
			 muxOutWire[ 44 ] = fifoOut[ 51 ][ 0 ]; 
			 muxOutWire[ 45 ] = fifoOut[ 51 ][ 0 ]; 
			 muxOutWire[ 46 ] = fifoOut[ 51 ][ 0 ]; 
			 muxOutWire[ 47 ] = fifoOut[ 51 ][ 0 ]; 
			 muxOutWire[ 48 ] = fifoOut[ 51 ][ 0 ]; 
			 muxOutWire[ 49 ] = fifoOut[ 51 ][ 0 ]; 
			 muxOutWire[ 50 ] = fifoOut[ 51 ][ 0 ]; 
			 muxOutWire[ 51 ] = fifoOut[ 51 ][ 0 ]; 
		 end
       default:begin 
        for(i=0;i<r;i=i+1)begin 
          muxOutWire[i] = 0; 
        end 
       end 
     endcase
    end
 default:begin 
        for(i=0;i<r;i=i+1)begin 
          muxOutWire[i] = 0; 
 end 
endcase
end
endmodule
